{"version":3,"sources":["api.tsx","Episode.tsx","App.tsx","index.tsx"],"names":["baseUrl","getEpisodes","a","fetch","method","headers","response","json","data","promises","map","ep","getSingleEpisode","id","Promise","all","openStyle","width","height","StyledDescription","styled","div","StyledContainer","StyledLink","StyledDateContainer","StyledTitleContainer","StyledTitle","StyledDate","EpisodeItem","episode","useState","currentStyle","setStyle","style","shortDescription","parse","fullDescriptionHtml","onClick","undefined","date","recordedVideoUrl","href","target","StyledHeader","StyledBody","App","episodes","setEpisodes","useEffect","then","console","log","Episode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAMA,EAAU,4DAUHC,EAAW,uCAAG,gCAAAC,EAAA,sEACFC,MAAM,GAAD,OAAIH,EAAJ,aAAwB,CAClDI,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHJ,cACnBC,EADmB,gBAMKA,EAASC,OANd,cAMnBC,EANmB,OAQnBC,EAAWD,EAAKE,KAAI,SAACC,GAAD,OAAQC,EAAiBD,EAAGE,OAR7B,kBAUlBC,QAAQC,IAAIN,IAVM,2CAAH,qDAaXG,EAAgB,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,sEACPC,MAAM,GAAD,OAAIH,EAAJ,qBAAwBa,GAAM,CACxDT,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHC,cACxBC,EADwB,gBAMFA,EAASC,OANP,cAMxBC,EANwB,yBAQvBA,GARuB,2CAAH,sD,i6CCR7B,IAAMQ,EAAmB,CAAEC,MAAO,OAAQC,OAAQ,SAoD5CC,EAAoBC,IAAOC,IAAV,KAMjBC,EAAkBF,IAAOC,IAAV,KAcfE,EAAaH,IAAOlB,EAAV,KAiBVsB,EAAsBJ,IAAOC,IAAV,KAYnBI,EAAuBL,IAAOC,IAAV,KAUpBK,EAAcN,IAAOC,IAAV,KAMXM,EAAaP,IAAOC,IAAV,KAIDO,EAvH6B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC1BC,qBAD0B,mBACpDC,EADoD,KACtCC,EADsC,KAwC3D,OACE,eAACV,EAAD,CAAiBW,MAAOF,EAAxB,UACE,cAACN,EAAD,UACE,cAACC,EAAD,UAAcG,EAAQK,qBAExB,cAACV,EAAD,WAzCF,OAAIO,QAAJ,IAAIA,OAAJ,EAAIA,EAAcd,OAEd,qCACE,cAACE,EAAD,UACGgB,IAAMN,EAAQO,uBAEjB,cAACT,EAAD,CACEU,QAAS,WACPL,OAASM,IAFb,sBAWF,qCACE,cAACX,EAAD,gCAA4BE,EAAQU,QACnCV,EAAQW,kBACP,cAACjB,EAAD,CAAYkB,KAAMZ,EAAQW,iBAAkBE,OAAO,SAAnD,oBAIF,cAACf,EAAD,CACEU,QAAS,WACPL,EAAShB,IAFb,iC,6mBCtCV,IAwBMM,EAAkBF,IAAOC,IAAV,KAIfsB,EAAevB,IAAOC,IAAV,KAUZK,EAAcN,IAAOC,IAAV,KAMXuB,EAAaxB,IAAOC,IAAV,KAODwB,EAnDO,WAAO,IAAD,EACMf,qBADN,mBACnBgB,EADmB,KACTC,EADS,KAU1B,OAPAC,qBAAU,WACR/C,IAAcgD,MAAK,SAAC3C,GAClB4C,QAAQC,IAAI7C,GACZyC,EAAYzC,QAEb,IAGD,eAAC,EAAD,WACE,cAACqC,EAAD,UACE,cAAC,EAAD,0BAEF,cAACC,EAAD,iBACGE,QADH,IACGA,OADH,EACGA,EAAUpC,KAAI,SAACmB,GAAD,OACb,cAACuB,EAAD,CAAavB,QAASA,aCpBhCwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e7ef5859.chunk.js","sourcesContent":["const baseUrl = 'https://react-challenge-api.herokuapp.com/first-challenge';\r\n\r\nexport interface Episode {\r\n  id: number;\r\n  date: string;\r\n  shortDescription: string;\r\n  fullDescriptionHtml: string;\r\n  recordedVideoUrl: string;\r\n}\r\n\r\nexport const getEpisodes = async (): Promise<Episode[]> => {\r\n  const response = await fetch(`${baseUrl}/episodes`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n\r\n  const data: Episode[] = await response.json();\r\n\r\n  const promises = data.map((ep) => getSingleEpisode(ep.id));\r\n\r\n  return Promise.all(promises);\r\n};\r\n\r\nexport const getSingleEpisode = async (id: number): Promise<Episode> => {\r\n  const response = await fetch(`${baseUrl}/episodes/${id}`, {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' }\r\n  });\r\n\r\n  const data: Episode = await response.json();\r\n\r\n  return data;\r\n};\r\n","import React, { useState } from 'react';\r\nimport parse from 'html-react-parser';\r\nimport styled from 'styled-components';\r\n\r\nimport { Episode } from './api';\r\n\r\ninterface EpisodeProps {\r\n  episode: Episode;\r\n}\r\n\r\ninterface Style {\r\n  height?: string;\r\n  width?: string;\r\n}\r\n\r\nconst openStyle: Style = { width: '100%', height: '700px' };\r\n\r\nconst EpisodeItem: React.FC<EpisodeProps> = ({ episode }) => {\r\n  const [currentStyle, setStyle] = useState<Style>();\r\n\r\n  const getContent = () => {\r\n    if (currentStyle?.width) {\r\n      return (\r\n        <>\r\n          <StyledDescription>\r\n            {parse(episode.fullDescriptionHtml)}\r\n          </StyledDescription>\r\n          <StyledDate\r\n            onClick={() => {\r\n              setStyle(undefined);\r\n            }}\r\n          >\r\n            Close\r\n          </StyledDate>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <StyledDate>{`Streamed in ${episode.date}`}</StyledDate>\r\n          {episode.recordedVideoUrl && (\r\n            <StyledLink href={episode.recordedVideoUrl} target=\"_blank\">\r\n              Watch!\r\n            </StyledLink>\r\n          )}\r\n          <StyledDate\r\n            onClick={() => {\r\n              setStyle(openStyle);\r\n            }}\r\n          >\r\n            Learn More\r\n          </StyledDate>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledContainer style={currentStyle}>\r\n      <StyledTitleContainer>\r\n        <StyledTitle>{episode.shortDescription}</StyledTitle>\r\n      </StyledTitleContainer>\r\n      <StyledDateContainer>{getContent()}</StyledDateContainer>\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nconst StyledDescription = styled.div`\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  flex: auto;\r\n  height: 200px;\r\n  min-width: 150px;\r\n  margin: 0 8px 8px 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  margin-top: 15px;\r\n  margin-bottom: 15px;\r\n\r\n  text-decoration: none;\r\n\r\n  color: white;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  &:visited {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst StyledDateContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  background-color: #22242c;\r\n  border-bottom-left-radius: 15px;\r\n`;\r\n\r\nconst StyledTitleContainer = styled.div`\r\n  width: 100%;\r\n  height: 100px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #685bbb;\r\n  border-top-right-radius: 15px;\r\n`;\r\n\r\nconst StyledTitle = styled.div`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: white;\r\n`;\r\n\r\nconst StyledDate = styled.div`\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default EpisodeItem;\r\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { getEpisodes,  Episode } from './api';\n\nimport EpisodeItem from './Episode';\n\nconst App: React.FC = () => {\n  const [episodes, setEpisodes] = useState<Episode[]>();\n\n  useEffect(() => {\n    getEpisodes().then((response) => {\n      console.log(response);\n      setEpisodes(response);\n    });\n  }, []);\n\n  return (\n    <StyledContainer>\n      <StyledHeader>\n        <StyledTitle>ReactChat</StyledTitle>\n      </StyledHeader>\n      <StyledBody>\n        {episodes?.map((episode: Episode) => (\n          <EpisodeItem episode={episode} />\n        ))}\n      </StyledBody>\n    </StyledContainer>\n  );\n};\n\nconst StyledContainer = styled.div`\n  font-family: Roboto, sans-serif;\n`;\n\nconst StyledHeader = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin-bottom: 50px;\n  padding-top: 25px;\n  padding-bottom: 25px;\n  background-color: #685bbb;\n`;\n\nconst StyledTitle = styled.div`\n  font-weight: bold;\n  font-size: 25px;\n  color: white;\n`;\n\nconst StyledBody = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  width: 100%;\n  margin-left: 8px;\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}